//
//  ApiManager.swift
//  iOStarter
//
//  Created by Macintosh on 07/04/22.
//  
//
//  This file was generated by Project Xcode Templates
//  Created by Wahyu Ady Prasetyo,
//  Source: https://github.com/dypme/iOStarter
//

import Foundation
import Alamofire
import SwiftyJSON

typealias ApiResponseCallback = ((JSON, Bool, String) -> Void)?
typealias UploadProgressCallback = ((Progress) -> Void)?

struct ApiManager {
    static let shared = ApiManager()
    
    /// Base API
    let BASE_URL = "BASE_URL"
    
    /// Alamofire session manager is Alamfire with some configuration of url session configuration
    private(set) var sessionManager: Alamofire.Session = {
        let configuration = URLSessionConfiguration.af.default
        configuration.timeoutIntervalForRequest = 60
        configuration.timeoutIntervalForResource = 60
        configuration.waitsForConnectivity = true
        
        let interceptor = ApiInterceptor()
        let logger = ApiLogger()
        return Alamofire.Session(configuration: configuration, interceptor: interceptor, eventMonitors: [logger])
    }()
    
    func request(to components: ApiComponents) async -> ApiResponse {
        let dataTask = sessionManager
            .request(components.url, method: components.method, parameters: components.parameters)
            .serializingData()
        let response = await ApiResponse(dataTask: dataTask)
        return response
    }
    
    func upload(to components: ApiComponents, progress: ((Progress) -> ())? = nil) async -> ApiResponse {
        let uploadRequest = sessionManager.upload(multipartFormData: { (multipartFormData) in
            for (key, value, mimeType) in components.uploadParameters {
                if let data = value as? Data {
                    if let mimeType = mimeType {
                        multipartFormData.append(data, withName: key, fileName: mimeType.generateFileName, mimeType: mimeType.value)
                    } else {
                        multipartFormData.append(data, withName: key)
                    }
                } else if let array = value as? Array<Any> {
                    array.compactMap({ String(describing: $0).data(using: .utf8) }).forEach { data in
                        multipartFormData.append(data, withName: "\(key)[]")
                    }
                } else if let strData = String(describing: value).data(using: .utf8) {
                    multipartFormData.append(strData, withName: key)
                }
            }
        }, to: components.url, method: components.method)
        uploadRequest.uploadProgress(closure: { progress?($0) })
        let response = await ApiResponse(dataTask: uploadRequest.serializingData())
        return response
    }
}
