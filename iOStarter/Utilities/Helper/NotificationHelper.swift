//
//  NotificationHelper.swift
//  iOStarter
//
//  Created by Macintosh on 07/04/22.
//  
//
//  This file was generated by Project Xcode Templates
//  Created by Wahyu Ady Prasetyo,
//  Source: https://github.com/dypme/iOStarter
//

import Foundation
import UserNotifications
// TODO: Adjust this when not use firebase
import FirebaseMessaging
import SwiftyJSON
import AVKit

class NotificationHelper: NSObject {
    static var shared = NotificationHelper()
    
    private var player: AVAudioPlayer?
    
    /// Setup all need for notification first
    func setupNotif(application: UIApplication) {
        UNUserNotificationCenter.current().delegate = self
        let options: UNAuthorizationOptions = [.alert, .badge, .sound]
        UNUserNotificationCenter.current().requestAuthorization(options: options, completionHandler: { (_, _) in })
        application.registerForRemoteNotifications()
        
        Messaging.messaging().delegate = self
        NotificationCenter.default.addObserver(self, selector: #selector(self.refreshFcmToken), name: NSNotification.Name.MessagingRegistrationTokenRefreshed, object: nil)
    }
    
    /// Save registration id token
    ///
    /// - Parameter deviceToken: Reg id to send notification in this device
    func register(deviceToken: Data) {
        // TODO: Adjust this when not use firebase
        Messaging.messaging().apnsToken = deviceToken
        #if DEBUG
            Messaging.messaging().setAPNSToken(deviceToken, type: .sandbox)
        #else
            Messaging.messaging().setAPNSToken(deviceToken, type: .prod)
        #endif
        
        refreshFcmToken()
    }
    
    /// Update registration id token
    ///
    /// - Parameter notification: Notification sender when token refresh
    @objc func refreshFcmToken() {
        // TODO: Adjust this when not use firebase
        Messaging.messaging().token { (token, error) in
            if let token = token {
                print("Messaging token: \(token)")
                UserSession.shared.regid = token
            }
        }
        if let token = Messaging.messaging().fcmToken {
            print("Fcm token \(token)")
            UserSession.shared.regid = token
        }
    }
    
    /// Custom sound of notification in foreground
    private func playCustomSound() {
//        guard let url = Bundle.main.url(forResource: "notification", withExtension: "mp3") else { return }
//        do {
//            try AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryPlayback)
//            try AVAudioSession.sharedInstance().setActive(true)
//
//            player = try AVAudioPlayer(contentsOf: url, fileTypeHint: AVFileType.mp3.rawValue)
//
//            guard let player = player else { return }
//
//            player.play()
//
//        } catch let error {
//            print(error.localizedDescription)
//        }
    }
    
    /// Trigger action when notification appear
    func notificationDidReceive(data: [AnyHashable : Any], withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        print("Notification will present in foreground")
        exampleAction()
        if #available(iOS 14.0, *) {
            completionHandler([.banner, .badge, .sound])
        } else {
            completionHandler([.alert, .badge, .sound])
        }
    }
    
    /// Trigger action when notification content-available = true in state background or active
    func notificationDidReceive(data: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        print("Notification will present with priority high (content_available = true)")
        
        switch UIApplication.shared.applicationState {
        case .background, .inactive:
            // Handle only when in background & inactive, for active state will handle in above method
            exampleAction()
            completionHandler(.newData)
        default:
            completionHandler(.noData)
        }
    }
    
    /// Trigger action when user tap on notification
    func notificationDidSelect(data: [AnyHashable : Any]) {
        let json = JSON(data)
        _ = json["title"].stringValue
        _ = json["content"].stringValue
        _ = json["action"].stringValue
        
        print("Hey you did receive notification \(json)")
        self.example2Action()
    }
    
    /// Example action of notification
    func exampleAction() {
        print("Oh, hey you trigger action when notification will present")
    }
    
    func example2Action() {
        print("Oh, hey you tap the notification")
    }
    
}

extension NotificationHelper : UNUserNotificationCenterDelegate {
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        let userInfo = notification.request.content.userInfo
        
        NotificationHelper.shared.notificationDidReceive(data: userInfo, withCompletionHandler: completionHandler)
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        let userInfo = response.notification.request.content.userInfo
        
        // Tap action in notification
        NotificationHelper.shared.notificationDidSelect(data: userInfo)
        
        completionHandler()
    }
}

// TODO: Adjust this when not use firebase
extension NotificationHelper : MessagingDelegate {
    func messaging(_ messaging: Messaging, didRefreshRegistrationToken fcmToken: String) {
        print("Firebase refresh registration token:", fcmToken)
        NotificationHelper.shared.refreshFcmToken()
    }
    
    func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) {
        print("Firebase receive registration token:", fcmToken ?? "")
        NotificationHelper.shared.refreshFcmToken()
    }
}
