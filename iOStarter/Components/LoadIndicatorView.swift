//
//  LoadIndicatorView.swift
//  iOStarter
//
//  Created by Macintosh on 07/04/22.
//  
//
//  This file was generated by Project Xcode Templates
//  Created by Wahyu Ady Prasetyo,
//  Source: https://github.com/dypme/iOStarter
//

import UIKit

class LoadIndicatorView: UIView {

    static let shared: LoadIndicatorView = {
        // MARK: For deprecated keyWindow can use this property window
        guard let window = UIApplication.shared.connectedScenes.compactMap({ $0 as? UIWindowScene }).flatMap({ $0.windows }).first(where: { $0.isKeyWindow }) else { fatalError("View not loaded") }
        let loadingView = LoadIndicatorView(parentView: window, tag: 1323)
        loadingView.isUserInteractionEnabled = true
        loadingView.backgroundColor = UIColor.black.withAlphaComponent(0.6)
        loadingView.activityId.color = UIColor.white
        return loadingView
    }()
    
    private var activityId: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .medium)
        indicator.translatesAutoresizingMaskIntoConstraints = false
        indicator.color = UIColor.white
        indicator.hidesWhenStopped = true
        return indicator
    }()
    
    private var parentView: UIView?
    
    init() {
        super.init(frame: .zero)
        
        self.isUserInteractionEnabled = false
        self.backgroundColor = UIColor.clear
        
        activityId.color = .gray
        
        setupView()
    }
    
    convenience init(parentView: UIView, tag: Int = 1328) {
        self.init()
        
        self.parentView = parentView
        self.tag = tag
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    func setupView() {
        self.addSubview(activityId)
        activityId.centerXAnchor.constraint(equalTo: self.centerXAnchor).isActive = true
        activityId.centerYAnchor.constraint(equalTo: self.centerYAnchor).isActive = true
    }
    
    /// Start animation of progress view
    func startAnimating() {
        if activityId.isAnimating {
            return
        }
        
        activityId.stopAnimating()
        activityId.startAnimating()
        
        if let parentView = self.parentView {
            parentView.addSubview(self)
            
            self.translatesAutoresizingMaskIntoConstraints = false
            self.topAnchor.constraint(equalTo: parentView.topAnchor).isActive = true
            self.leadingAnchor.constraint(equalTo: parentView.leadingAnchor).isActive = true
            self.trailingAnchor.constraint(equalTo: parentView.trailingAnchor).isActive = true
            self.bottomAnchor.constraint(equalTo: parentView.bottomAnchor).isActive = true
        }
    }
    
    /// Stop animation of progress view
    func stopAnimating() {
        activityId.stopAnimating()
        self.removeFromSuperview()
    }

}

extension UIView {
    /// Start animating activity indicator in superview of current view
    func startAnimatingIndicator(tag: Int = 1328) {
        let activityId = LoadIndicatorView(parentView: self, tag: tag)
        if !self.subviews.contains(where: { $0.tag == tag }) {
            activityId.startAnimating()
        }
    }
    
    /// Stop animating activity indicator in superview of current view
    func stopAnimatingIndicator(tag: Int = 1328) {
        if let activityId = self.subviews.first(where: { $0.tag == tag }) as? LoadIndicatorView {
            activityId.stopAnimating()
        }
    }
}
