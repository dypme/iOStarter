//
//  AppDelegate.swift
//  iOStarter
//
//  Created by Macintosh on 07/04/22.
//  
//
//  This file was generated by Project Xcode Templates
//  Created by Wahyu Ady Prasetyo,
//  Source: https://github.com/dypme/iOStarter
//

import UIKit

import NVActivityIndicatorView
import IQKeyboardManagerSwift

// TODO: Need remove if not use firebase
import Firebase

import MMKV

class AppDelegate: UIResponder, UIApplicationDelegate {

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Override point for customization after application launch.
        setApp()
        // uncomment setupNotification if need push notification
        setupNotification(application: application)
        
        return true
    }
    
    /// Setting all application need
    func setApp() {
        MMKV.initialize(rootDir: nil)
        
        SettingsManager.setupSettings()
        
        KeyboardStateListener.shared.start()
        IQKeyboardManager.shared.enable = true
        IQKeyboardManager.shared.shouldResignOnTouchOutside = true
        
        // TODO: Need remove if not use firebase
        FirebaseApp.configure()
        
        NVActivityIndicatorView.DEFAULT_TYPE = .ballPulse
        
        configureNavigationBar()
    }
    
    func configureNavigationBar() {
        let navigationBarAppearance = UINavigationBar.appearance()
        navigationBarAppearance.shadowImage = UIImage()
        navigationBarAppearance.barTintColor = UIColor.white
        navigationBarAppearance.backgroundColor = UIColor.white
        let attrTitle = [
            NSAttributedString.Key.font: UIFont.boldSystemFont(ofSize: 16),
            NSAttributedString.Key.foregroundColor: Asset.Colors.primaryBlack.color
        ]
        navigationBarAppearance.titleTextAttributes = attrTitle
        navigationBarAppearance.tintColor = Asset.Colors.primaryBlack.color
        navigationBarAppearance.setBackgroundImage(UIImage(), for: .default)
        
        // TODO: Change navigation bar back icon if needed or remove if want default
        navigationBarAppearance.backIndicatorImage = UIImage(systemName: "arrow.backward")
        navigationBarAppearance.backIndicatorTransitionMaskImage = UIImage(systemName: "arrow.backward")
        
        let appearance = UINavigationBarAppearance()
        appearance.backgroundColor = navigationBarAppearance.backgroundColor
        appearance.titleTextAttributes = attrTitle
        appearance.shadowColor = .clear
        appearance.shadowImage = navigationBarAppearance.shadowImage
        
        // TODO: Change back title appearance if needed or remove if want default
        let backAppearance = appearance.backButtonAppearance
        backAppearance.normal.titleTextAttributes = [.foregroundColor: UIColor.clear]
        backAppearance.highlighted.titleTextAttributes = [.foregroundColor: UIColor.clear]
        backAppearance.focused.titleTextAttributes = [.foregroundColor: UIColor.clear]
        backAppearance.disabled.titleTextAttributes = [.foregroundColor: UIColor.clear]
        
        appearance.setBackIndicatorImage(
            navigationBarAppearance.backIndicatorImage,
            transitionMaskImage: navigationBarAppearance.backIndicatorTransitionMaskImage
        )
        
        UINavigationBar.appearance().standardAppearance = appearance
        UINavigationBar.appearance().scrollEdgeAppearance = appearance
    }
    
    /// Setup notification settings
    func setupNotification(application: UIApplication) {
        NotificationHelper.shared.setupNotif(application: application)
    }
    
    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {
        NotificationHelper.shared.register(deviceToken: deviceToken)
    }
    
    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {
        
        NotificationHelper.shared.notificationDidReceive(data: userInfo, fetchCompletionHandler: completionHandler)
    }

    // MARK: UISceneSession Lifecycle

    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -> UISceneConfiguration {
        // Called when a new scene session is being created.
        // Use this method to select a configuration to create the new scene with.
        return UISceneConfiguration(name: "Default Configuration", sessionRole: connectingSceneSession.role)
    }

    func application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set<UISceneSession>) {
        // Called when the user discards a scene session.
        // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.
        // Use this method to release any resources that were specific to the discarded scenes, as they will not return.
    }
}
